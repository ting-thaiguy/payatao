{"version":3,"sources":["components/layout/Navigation.js","App.js","serviceWorker.js","index.js"],"names":["Navigation","react_default","a","createElement","Navbar","bg","variant","expand","Brand","href","Toggle","aria-controls","Collapse","id","Nav","className","NavLink","activeClassName","to","NavDropdown","title","Item","Divider","Form","inline","FormControl","type","placeholder","Button","Home","About","Topic","_ref","match","params","Topics","_ref2","Link","concat","url","Route","path","component","exact","render","App","BrowserRouter","layout_Navigation","this","props","Component","Boolean","window","location","hostname","ReactDOM","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1ba65a36.chunk.js","sourcesContent":["import React from \"react\";\nimport {NavLink} from \"react-router-dom\"\n import {Navbar,Nav,Form,FormControl,Button,NavDropdown} from \"react-bootstrap\";\n const  Navigation = ()=>{\n  return (<Navbar bg=\"primary\" variant=\"dark\" expand=\"lg\">\n  <Navbar.Brand href=\"#home\">React-Bootstrap</Navbar.Brand>\n  <Navbar.Toggle aria-controls=\"primary-navbar-nav\" />\n  <Navbar.Collapse id=\"primary-navbar-nav\">\n    <Nav className=\"mr-auto\">\n      <NavLink activeClassName=\"active\" to=\"/about\"  >About</NavLink>\n      <NavLink activeClassName=\"active\" to=\"/topics\"  >Topics</NavLink>\n      <NavDropdown title=\"Dropdown\" id=\"primary-nav-dropdown\">\n        <NavDropdown.Item href=\"#action/3.1\">Action</NavDropdown.Item>\n        <NavDropdown.Item href=\"#action/3.2\">Another action</NavDropdown.Item>\n        <NavDropdown.Item href=\"#action/3.3\">Something</NavDropdown.Item>\n        <NavDropdown.Divider />\n        <NavDropdown.Item href=\"#action/3.4\">Separated link</NavDropdown.Item>\n      </NavDropdown>\n    </Nav>\n    <Form inline>\n      <FormControl type=\"text\" placeholder=\"Search\" className=\"mr-sm-2\" />\n      <Button  variant=\"outline-light\" >Search</Button>\n    </Form>\n  </Navbar.Collapse>\n</Navbar>)\n}\nexport default Navigation;","\nimport React ,{Component} from \"react\";\nimport { BrowserRouter ,Route, Link} from \"react-router-dom\";\nimport Navigation from \"./components/layout/Navigation\";\n// import SignedInLink from \"./components/layout/SignedInLink\";\n// import SignedOutLink from \"./components/layout/SignedOutLink\";\n\n\n\nfunction Home() {\n  return <h2>Home</h2>;\n}\n\nfunction About() {\n  return <h2>About</h2>;\n}\n\nfunction Topic({ match }) {\n  return <h3>Requested Param: {match.params.id}</h3>;\n}\nfunction Topics({ match }) {\n  return (\n    <div>\n      <h2>Topics</h2>\n\n      <ul>\n        <li>\n          <Link to={`${match.url}/components`}>Components</Link>\n        </li>\n        <li>\n          <Link to={`${match.url}/props-v-state`}>Props v. State</Link>\n        </li>\n      </ul>\n\n      <Route path={`${match.path}/:id`} component={Topic} />\n      <Route\n        exact\n        path={match.path}\n        render={() => <h3>Please select a topic.</h3>}\n      />\n    </div>\n  );\n}\nclass App extends Component {\n\n  render(){\n\n    return(\n      <BrowserRouter>\n        <div className=\"App\">\n         <Navigation {...this.props} />\n         <Route exact path=\"/\" component={Home} />\n        <Route path=\"/about\" component={About} />\n        <Route path=\"/topics\" component={Topics} />\n        </div>\n      </BrowserRouter>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App/>,document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}